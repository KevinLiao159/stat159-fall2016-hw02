library(ggplot2)
a <- c(22.8, 10.2, 20.8, 27.0, 19.2, 9.0, 14.2, 19.8, 14.5, 14.8)
b <- c(23.5, 31.0, 19.5, 26.2, 26.5, 25.2, 24.5, 23.8, 27.8, 22.0)
df_ab <- data.frame(groups = c(rep("a",10), rep("b",10)), weight_gains = c(a,b))
ggplot(df_ab, aes(x = groups, y = weight_gains, colour = groups)) +
geom_point() +
geom_line()
install.packages("ggplot2")
library(ggplot2)
a <- c(22.8, 10.2, 20.8, 27.0, 19.2, 9.0, 14.2, 19.8, 14.5, 14.8)
b <- c(23.5, 31.0, 19.5, 26.2, 26.5, 25.2, 24.5, 23.8, 27.8, 22.0)
df_ab <- data.frame(groups = c(rep("a",10), rep("b",10)), weight_gains = c(a,b))
ggplot(df_ab, aes(x = groups, y = weight_gains, colour = groups)) +
geom_point() +
geom_line()
library(lattice)
require(ggplot2)
require(reshape)
require(ggplot2)
require(reshape2)
library(plyr)
---
title: "Homework 12"
author: "Kevin Liao"
date: "April 11, 2016"
output: pdf_document
---
## 21.
#(e) Use the bootstrap to estimate the sampling distribution of πˆ and its standard error.
```{r}
x <- c(3.03,5.53,5.60,9.30,9.92,12.51,12.95,15.21,16.04,16.84)
y <- c(3.19, 4.26, 4.47, 4.53, 4.67, 4.69, 12.78, 6.79, 9.37, 12.75)
n1 <- length(x)
n2 <- length(y)
x_sum_base <- n1 * (1 + n2) / 2
B = 1000
rank_x <- c()
for (i in 1:B) {
x_new <- sample(x, n1, replace = TRUE)
y_new <- sample(y, n2, replace = TRUE)
rank_x[i] <- sum(rank(c(x_new,y_new))[1:n1])
}
num_x_greaterthan_y <- rank_x - x_sum_base
pi_est <- num_x_greaterthan_y / (n1 * n2)
# sampling distribution of pi_est and standard error
hist(pi_est)
sd(pi_est)
```
#(f) Use the bootstrap to find an approximate 90% confidence interval for π.
```{r}
# Find 90% C.I. for pi
# Z-score = 1.645
Xmean_pi <- mean(pi_est)
sd_pi <- sd(pi_est)
left_bound <- Xmean_pi - 1.645 * sd_pi
right_bound <- Xmean_pi + 1.645 * sd_pi
cat("90% Confidence Interval is (", left_bound, ",", right_bound, ")" )
```
## 40.
#(a) Parallel dotplot for experiment of two groups
```{r,echo=FALSE}
a <- c(22.8, 10.2, 20.8, 27.0, 19.2, 9.0, 14.2, 19.8, 14.5, 14.8)
b <- c(23.5, 31.0, 19.5, 26.2, 26.5, 25.2, 24.5, 23.8, 27.8, 22.0)
df_ab <- data.frame(groups = c(rep("a",10), rep("b",10)), weight_gains = c(a,b))
ggplot(df_ab, aes(x = groups, y = weight_gains, colour = groups)) +
geom_point() +
geom_line()
```
#(b) Find a 95% confidence interval for the difference of the mean weight gains
```{r}
# we use t-test to construct 95% confidence interval(assumming same population variance)
# Null Hypothesis: u_x = u_y    Alternative: u_x != u_y
# pooled variance
n1 <- length(a)
n2 <- length(b)
s1 <- sd(a)
s2 <- sd(b)
S_p <- sqrt(((n1 - 1) * s1 + (n2 - 1) * s2) / (n1 + n2 -2))
# t-score of df(18) = 2.101
mean_diff <- mean(a) - mean(b)
q <- S_p * sqrt((1/n1) + (1/n2))
left_bound <- mean_diff - 2.101 * q
right_bound <- mean_diff + 2.101 * q
cat("95% Confidence Interval is (", left_bound, ",", right_bound, ")" )
```
#(c) Use a t test to assess the statistical significance of the observed difference. What is the p-value of the test?
```{r}
## In a t-test, the test statistic = (sample mean of a - sample mean of b) / pooled standard error
t_stat <- (mean(a) - mean(b)) / q     ## df = 18
cat("t test statistics is ", t_stat)
## p-value = Probability of an observed t_stat under the null distribution
## from the table of df = 18 of two sided
cat("p-value is 0.001")
```
#(d) Repeat using a nonparametric test.
```{r}
# let's field present group be the small group
n <- n1
R <- sum(rank(c(a, b))[1:n])
R_1 <- n * (n1 + n2 + 1) -R       ## calculate R prime
R_2 <- min(c(R, R_1))             ## calculate R star
## decision rule: reject Null Hypo. if R_2 <= critial value
cat("Null Hypothesis is rejected because ", R_2, " is less than 78 (crital value of ranksum test)")
```
#(e) What is the difference of the median weight gains?
```{r}
median_diff <- median(a) - median(b)
median_diff
```
#(f) Use the bootstrap to estimate the standard error of the difference of median weight gains.
```{r}
##
B <- 1000
b_median_diff <- c()
for(i in 1:B) {
new_a <- sample(a, n, replace = TRUE)
new_b <- sample(b, n, replace = TRUE)
b_median_diff[i] <- median(new_a) - median(new_b)
}
sd(b_median_diff)
```
#(g) Form a confidence interval for the difference of median weight gains based on the bootstrap approximation to the sampling distribution.
```{r}
## By CLT, we will use normal distribution
# Find 95% C.I. for pi
# Z-score = 1.96
Bmean <- mean(b_median_diff)
sd_diff <- sd(b_median_diff)
left_bound <- Bmean - 1.96 * sd_diff
right_bound <- Bmean + 1.96 * sd_diff
cat("95% Confidence Interval is (", left_bound, ",", right_bound, ")" )
```
## 50. bodytemp contains normal body temperature readings
#(a) Using normal theory, form a 95% confidence interval for the difference of mean body temperatures between males and females.
```{r}
## read data
bodytemp <- read.csv("bodytemp.csv", stringsAsFactors = TRUE)
# subset male and female temp
t1 <- bodytemp$temperature[bodytemp$gender == 1]
t2 <- bodytemp$temperature[bodytemp$gender == 2]
# Find 95% C.I. for difference of mean temp
# Z-score = 1.96
n1 <- length(t1)
n2 <- length(t2)
diff_mean <- mean(t1) - mean(t2)
sd_diff <- sqrt((var(t1)/n1 + var(t2)/n2))
left_bound <- diff_mean - 1.96 * sd_diff
right_bound <- diff_mean + 1.96 * sd_diff
cat("95% Confidence Interval is (", left_bound, ",", right_bound, ")" )
```
#(b) Using normal theory, form a 95% confidence interval for the difference of mean heart rates between males and females.
```{r}
# subset male and female rate
r1 <- bodytemp$rate[bodytemp$gender == 1]
r2 <- bodytemp$rate[bodytemp$gender == 2]
# Find 95% C.I. for difference of mean temp
# Z-score = 1.96
n1 <- length(r1)
n2 <- length(r2)
diff_mean <- mean(r1) - mean(r2)
sd_diff <- sqrt((var(r1)/n1 + var(r1)/n2))
left_bound <- diff_mean - 1.96 * sd_diff
right_bound <- diff_mean + 1.96 * sd_diff
cat("95% Confidence Interval is (", left_bound, ",", right_bound, ")" )
```
#(c) Use both parametric and nonparametric tests to compare the body tempera- tures and heart rates.
```{r}
## Let's do nonparametric test to temp
n1 <- length(t1)
n2 <- length(t2)
n <- min(c(n1,n2))
# let the male group t1 be smaller group
R <- sum(rank(c(t1, t2))[1:n])
R_1 <- n * (n1 + n2 + 1) - R       ## calculate R prime
R_2 <- min(c(R, R_1))              ## calculate R star
## decision rule: reject Null Hypo. if R_2 <= critial value
cat("Null Hypothesis is rejected because ", R_2, " is less than c (crital value of ranksum test)")
## don't have critical for n1 = n2 = 65 in rank sum test
```
t_stat <- (mean(a) - mean(b)) / q     ## df = 18
cat("t test statistics is ", t_stat)
cat("t test statistics is ", t_stat)
cat("t test statistics is ", t_stat)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(df_ab, aes(x = groups, y = weight_gains, colour = groups)) +
geom_point() +
geom_line()
hist(pi_est)
sd(pi_est)
hist(pi_est)
sd(pi_est)
# Z-score = 1.645
Xmean_pi <- mean(pi_est)
sd_pi <- sd(pi_est)
left_bound <- Xmean_pi - 1.645 * sd_pi
right_bound <- Xmean_pi + 1.645 * sd_pi
cat("90% Confidence Interval is (", left_bound, ",", right_bound, ")" )
a <- c(22.8, 10.2, 20.8, 27.0, 19.2, 9.0, 14.2, 19.8, 14.5, 14.8)
b <- c(23.5, 31.0, 19.5, 26.2, 26.5, 25.2, 24.5, 23.8, 27.8, 22.0)
df_ab <- data.frame(groups = c(rep("a",10), rep("b",10)), weight_gains = c(a,b))
ggplot(df_ab, aes(x = groups, y = weight_gains, colour = groups)) +
geom_point() +
geom_line()
# we use t-test to construct 95% confidence interval(assumming same population variance)
# Null Hypothesis: u_x = u_y    Alternative: u_x != u_y
# pooled variance
n1 <- length(a)
n2 <- length(b)
s1 <- sd(a)
s2 <- sd(b)
S_p <- sqrt(((n1 - 1) * s1 + (n2 - 1) * s2) / (n1 + n2 -2))
# t-score of df(18) = 2.101
mean_diff <- mean(a) - mean(b)
q <- S_p * sqrt((1/n1) + (1/n2))
left_bound <- mean_diff - 2.101 * q
right_bound <- mean_diff + 2.101 * q
cat("95% Confidence Interval is (", left_bound, ",", right_bound, ")" )
# let's field present group be the small group
n <- n1
R <- sum(rank(c(a, b))[1:n])
R_1 <- n * (n1 + n2 + 1) -R       ## calculate R prime
R_2 <- min(c(R, R_1))             ## calculate R star
## decision rule: reject Null Hypo. if R_2 <= critial value
cat("Null Hypothesis is rejected because ", R_2, " is less than 78 (crital value of ranksum test)")
median_diff <- median(a) - median(b)
median_diff
B <- 1000
b_median_diff <- c()
for(i in 1:B) {
new_a <- sample(a, n, replace = TRUE)
new_b <- sample(b, n, replace = TRUE)
b_median_diff[i] <- median(new_a) - median(new_b)
}
sd(b_median_diff)
B <- 1000
b_median_diff <- c()
for(i in 1:B) {
new_a <- sample(a, n, replace = TRUE)
new_b <- sample(b, n, replace = TRUE)
b_median_diff[i] <- median(new_a) - median(new_b)
}
sd(b_median_diff)
Bmean <- mean(b_median_diff)
sd_diff <- sd(b_median_diff)
left_bound <- Bmean - 1.96 * sd_diff
right_bound <- Bmean + 1.96 * sd_diff
cat("95% Confidence Interval is (", left_bound, ",", right_bound, ")" )
## read data
bodytemp <- read.csv("bodytemp.csv", stringsAsFactors = TRUE)
# subset male and female temp
t1 <- bodytemp$temperature[bodytemp$gender == 1]
t2 <- bodytemp$temperature[bodytemp$gender == 2]
# Find 95% C.I. for difference of mean temp
# Z-score = 1.96
n1 <- length(t1)
n2 <- length(t2)
diff_mean <- mean(t1) - mean(t2)
sd_diff <- sqrt((var(t1)/n1 + var(t2)/n2))
left_bound <- diff_mean - 1.96 * sd_diff
right_bound <- diff_mean + 1.96 * sd_diff
cat("95% Confidence Interval is (", left_bound, ",", right_bound, ")" )
## read data
bodytemp <- read.csv("bodytemp.csv", stringsAsFactors = TRUE)
# subset male and female temp
t1 <- bodytemp$temperature[bodytemp$gender == 1]
t2 <- bodytemp$temperature[bodytemp$gender == 2]
# Find 95% C.I. for difference of mean temp
# Z-score = 1.96
n1 <- length(t1)
n2 <- length(t2)
diff_mean <- mean(t1) - mean(t2)
sd_diff <- sqrt((var(t1)/n1 + var(t2)/n2))
left_bound <- diff_mean - 1.96 * sd_diff
right_bound <- diff_mean + 1.96 * sd_diff
cat("95% Confidence Interval is (", left_bound, ",", right_bound, ")" )
```{r}
# subset male and female rate
r1 <- bodytemp$rate[bodytemp$gender == 1]
r2 <- bodytemp$rate[bodytemp$gender == 2]
# Find 95% C.I. for difference of mean temp
# Z-score = 1.96
n1 <- length(r1)
n2 <- length(r2)
diff_mean <- mean(r1) - mean(r2)
sd_diff <- sqrt((var(r1)/n1 + var(r1)/n2))
left_bound <- diff_mean - 1.96 * sd_diff
right_bound <- diff_mean + 1.96 * sd_diff
cat("95% Confidence Interval is (", left_bound, ",", right_bound, ")" )
## Let's do nonparametric test to temp
n1 <- length(t1)
n2 <- length(t2)
n <- min(c(n1,n2))
# let the male group t1 be smaller group
R <- sum(rank(c(t1, t2))[1:n])
R_1 <- n * (n1 + n2 + 1) - R       ## calculate R prime
R_2 <- min(c(R, R_1))              ## calculate R star
## decision rule: reject Null Hypo. if R_2 <= critial value
cat("Null Hypothesis is rejected because ", R_2, " is less than c (crital value of ranksum test)")
## don't have critical for n1 = n2 = 65 in rank sum test
x <- c(1.15, 1.86, 0.76, 1.82, 1.14, 1.65, 1.92, 1.01, 1.12, 0.90, 1.40)
y <- c(1, 1.9, 0.9, 1.8, 1.12, 1.70, 1.95, 1.02, 1.23, 0.97, 1.52)
sum(rank(x,y)[12:22])
x
y
rank(x)
sum(rank(c(x,y))[12:22])
spy <- read.csv("SPY517.xlsx", header = TRUE, stringsAsFactors = FALSE)
spy <- read.table("SPY517.xlsx", header = TRUE, stringsAsFactors = FALSE)
View(spy)
download.packages("xlsx")
mymatrix = matrix(data = c(1,1,1,1,1,1,1,1,1), nrow = 3, ncol = 3)
write.csv(mymatrix, "testfile.csv")
x
x
y
plot(x,y)
?rnorm
y <- rnorm(20, 0 , 1)
x1 <- rep(1,20)
model <- lm(y~x1)
summary(model)
plot(y, x1)
plot(x1, y)
x2 <- rep(1,20)
model <- lm(y~x1+x2)
model <- lm(y~x1+x2)
summary(model)
model <- lm(y~I(x1+x2)
model <- lm(y~I(x1+x2))
summary(model)
library(knitr)
?"knitr"
?purl
setwd("~/Documents/stat159/stat159-fall2016-hw02/code")
Advertising <- read.csv(file = "../Advertising.csv", header = TRUE)
setwd("~/Documents/stat159/stat159-fall2016-hw02/code")
Advertising <- read.csv(file = "../Advertising.csv", header = TRUE)
Advertising <- read.csv(file = "../data/Advertising.csv", header = TRUE)
Advertising <- read.csv(file = "../data/Advertising.csv", header = TRUE)
View(Advertising)
Advertising <- read.csv(file = "../data/Advertising.csv", header = FALSE)
View(Advertising)
Advertising <- read.csv(file = "../data/Advertising.csv", header = TRUE)
View(Advertising)
summary(Advertising)
summary(Advertising$TV)
sink(file = ../data/"eda-output.txt")
sink(file = "../data/eda-output.txt")
summary(Advertising$TV)
sink()
Summary of TV
sink(file = "../data/eda-output.txt")
Summary of TV
summary(Advertising$TV)
sink()
sink(file = "../data/eda-output.txt")
print("Summary of TV")
summary(Advertising$TV)
sink()
# Output summary and histogram to eda-output
sink(file = "../data/eda-output.txt")
print("Summary of Statistics of TV")
summary(Advertising$TV)
sink()
# Output summary and histogram to eda-output
sink(file = "../data/eda-output.txt", append = TRUE)
print("Summary of Statistics of Sales")
summary(Advertising$Sales)
sink()
hist_of_TV <- hist(Advertising$TV)
histogram-tv <- hist(Advertising$TV)
histogram-tv <- hist(Advertising$TV)
histogram_tv <- hist(Advertising$TV)
histogram_tv <- hist(Advertising$TV)
dev.copy(histogram_tv,'../images/histogram-tv.png')
dev.copy(histogram_tv,'../images/histogram-tv.png')
?dev.copy
histogram_tv <- hist(Advertising$TV)
dev.copy(png,'../images/histogram-tv.png')
dev.off()
png(../images/ histogram-tv.png)
png("../images/ histogram-tv.png")
hist(Advertising$TV)
dev.off()
png("../images/histogram-tv.png")
pdf("../images/histogram-tv.pdf")
hist(Advertising$TV)
dev.off()
hist(Advertising$TV)
dev.copy(png, '../images/histogram-tv.png')
dev.copy(pdf, '../images/histogram-tv.pdf')
dev.off()
hist(Advertising$TV)
dev.copy(png, '../images/histogram-tv.png')
dev.off()
dev.copy(pdf, '../images/histogram-tv.pdf')
dev.off()
hist(Advertising$Sales)
dev.copy(png, '../images/histogram-sales.png')
dev.off()
dev.copy(pdf, '../images/histogram-sales.pdf')
dev.off()
# Read Advertising data into R
Advertising <- read.csv(file = "../data/Advertising.csv", header = TRUE)
# Output summary and histogram to eda-output
sink(file = "../data/eda-output.txt")
print("Summary of Statistics of TV")
summary(Advertising$TV)
sink()
# Output summary and histogram to eda-output
sink(file = "../data/eda-output.txt", append = TRUE)
print("Summary of Statistics of Sales")
summary(Advertising$Sales)
sink()
# Save histogram of TV in both PNG and PDF formats
hist(Advertising$TV)
dev.copy(png, '../images/histogram-tv.png')
dev.off()
dev.copy(pdf, '../images/histogram-tv.pdf')
dev.off()
# Save histogram of Sales in both PNG and PDF formats
hist(Advertising$Sales)
dev.copy(png, '../images/histogram-sales.png')
dev.off()
dev.copy(pdf, '../images/histogram-sales.pdf')
dev.off()
# Read Advertising data into R
Advertising <- read.csv(file = "../data/Advertising.csv", header = TRUE)
# Run Simple Linear Regression of Sales and TV
lm <- lm(Sales ~ TV, data = Advertising)
# Output summary of the regression to regression.RData
regression < summary(lm)
save(regression, file = '../data/regression.RData')
# Read Advertising data into R
Advertising <- read.csv(file = "../data/Advertising.csv", header = TRUE)
# Run Simple Linear Regression of Sales and TV
lm <- lm(Sales ~ TV, data = Advertising)
# Output summary of the regression to regression.RData
regression <- summary(lm)
save(regression, file = '../data/regression.RData')
?plot
plot(x = Advertising$TV, y = Advertising$Sales, main = "Regression Analysis of Sales and TV",
xlab = "TV", ylab = "Sales", col = "red")
xlab = "TV", ylab = "Sales", col = "red", pch = 1.0)
plot(x = Advertising$TV, y = Advertising$Sales, main = "Regression Analysis of Sales and TV",
xlab = "TV", ylab = "Sales", col = "red", pch = 1.0)
plot(x = Advertising$TV, y = Advertising$Sales, main = "Regression Analysis of Sales and TV",
xlab = "TV", ylab = "Sales", col = "red", pch = 1.0)
plot(x = Advertising$TV, y = Advertising$Sales, main = "Regression Analysis of Sales and TV",
xlab = "TV", ylab = "Sales", col = "red", pch = 0.1)
plot(x = Advertising$TV, y = Advertising$Sales, main = "Regression Analysis of Sales and TV",
xlab = "TV", ylab = "Sales", col = "red", pct = 0.5)
# Read Advertising data into R
Advertising <- read.csv(file = "../data/Advertising.csv", header = TRUE)
# Run Simple Linear Regression of Sales and TV
lm <- lm(Sales ~ TV, data = Advertising)
# Output summary of the regression to regression.RData
regression <- summary(lm)
save(regression, file = '../data/regression.RData')
# Save scatter plot of regression in both PNG and PDF
plot(x = Advertising$TV, y = Advertising$Sales, main = "Regression Analysis of Sales and TV",
xlab = "TV", ylab = "Sales", col = "red")
abline(lm, col = "blue")
# Read Advertising data into R
Advertising <- read.csv(file = "../data/Advertising.csv", header = TRUE)
# Run Simple Linear Regression of Sales and TV
lm <- lm(Sales ~ TV, data = Advertising)
# Output summary of the regression to regression.RData
regression <- summary(lm)
save(regression, file = '../data/regression.RData')
# Save scatter plot of regression in both PNG and PDF
plot(x = Advertising$TV, y = Advertising$Sales, main = "Regression Analysis of Sales and TV",
xlab = "TV", ylab = "Sales", col = "red", pch = 0.5)
abline(lm, col = "blue")
# Read Advertising data into R
Advertising <- read.csv(file = "../data/Advertising.csv", header = TRUE)
# Run Simple Linear Regression of Sales and TV
lm <- lm(Sales ~ TV, data = Advertising)
# Output summary of the regression to regression.RData
regression <- summary(lm)
save(regression, file = '../data/regression.RData')
# Save scatter plot of regression in both PNG and PDF
plot(x = Advertising$TV, y = Advertising$Sales, main = "Regression Analysis of Sales and TV",
xlab = "TV", ylab = "Sales", col = "red", pch = 3)
abline(lm, col = "blue")
# Read Advertising data into R
Advertising <- read.csv(file = "../data/Advertising.csv", header = TRUE)
# Run Simple Linear Regression of Sales and TV
lm <- lm(Sales ~ TV, data = Advertising)
# Output summary of the regression to regression.RData
regression <- summary(lm)
save(regression, file = '../data/regression.RData')
# Save scatter plot of regression in both PNG and PDF
plot(x = Advertising$TV, y = Advertising$Sales, main = "Regression Analysis of Sales and TV",
xlab = "TV", ylab = "Sales", col = "red", cex = 0.5)
abline(lm, col = "blue")
# Read Advertising data into R
Advertising <- read.csv(file = "../data/Advertising.csv", header = TRUE)
# Run Simple Linear Regression of Sales and TV
lm <- lm(Sales ~ TV, data = Advertising)
# Output summary of the regression to regression.RData
regression <- summary(lm)
save(regression, file = '../data/regression.RData')
# Save scatter plot of regression in both PNG and PDF
plot(x = Advertising$TV, y = Advertising$Sales, main = "Regression Analysis of Sales and TV",
xlab = "TV", ylab = "Sales", col = "red", cex = 0.5)
abline(lm, col = "blue")
dev.copy(png, '../images/scatterplot-tv-sales.png')
dev.off()
dev.copy(pdf, '../images/scatterplot-tv-sales.pdf')
dev.off()
regression
